X-smtp-relay-MAIL_FROM:test@test.com
X-smtp-relay-CLIENT_HOSTNAME:localhost
X-smtp-relay-HELO:localhost
import * as url from "node:url";
import { SmtpFilter } from "./filter"; // Base SmtpFilter
import { SmtpProcessor } from "./processor"; // Base SmtpProcessor
import { SmtpServer } from "./server";

// Import registration functions
import { registerAllFilters } from "./filters/index";
// Assuming a similar pattern for processors, let's create src/processors/index.ts and import registerAllProcessors
// For now, processor registration can remain here if it's not causing issues, or be moved.
// To be consistent, let's assume we'll move processor registration too.
import { FileProcessor } from "./processors/file";
import { NodeMailerProcessor } from "./processors/nodemailer";
import { AWSProcessor } from "./processors/aws";
import { GCPProcessor } from "./processors/gcp";
import { LogProcessor } from "./processors/log";


export * from "./cloudevent"; // Exporting types/interfaces

/**
 * Define the default modules by calling registration functions.
 */
export function defaultModules() {
  registerAllFilters();

  // Register processors (can be moved to a registerAllProcessors function in src/processors/index.ts)
  SmtpProcessor.register("file", FileProcessor);
  SmtpProcessor.register("nodemailer", NodeMailerProcessor);
  SmtpProcessor.register("aws", AWSProcessor);
  SmtpProcessor.register("gcp", GCPProcessor);
  SmtpProcessor.register("log", LogProcessor);
  // console.log("defaultModules called: Filters and Processors registered.");
}

// Make SmtpServer available for users importing the library
export { SmtpServer };

// Main execution block for running the server directly
/* c8 ignore start */
// url.pathToFileURL(__filename).href for CJS
if (import.meta.url === url.pathToFileURL(process.argv[1]).href) {
  process.on("SIGINT", () => {
    console.log("Exiting server");
    process.exit(0);
  });

  defaultModules(); // Ensure registrations happen before server instantiation
  let conf;
  if (process.argv.length > 2) {
    conf = process.argv.pop();
  }
  let smtp = new SmtpServer(conf);
  smtp.init();
}
/* c8 ignore stop */
